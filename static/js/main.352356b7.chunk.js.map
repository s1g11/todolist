{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trim","addItem","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","EditableSpan","newTitle","setNewTitle","edit","setEdit","changeEditHandler","callBack","autoFocus","onBlur","onChangeHandler","type","onDoubleClick","Todolist","editTodolistTitle","todolistId","removeTodolist","tasks","map","t","key","id","isDone","changeTaskStatus","checked","editTask","removeTask","filter","changeFilter","App","todolistID1","v1","todolistID2","todolists","setTodolists","setTasks","el","tdl","taskId","newTask","console","log","changeStatus","newTodolist","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.352356b7.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title:string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n\r\n    const [newTitle, setNewTitle] = useState(props.title)\r\n    const [edit, setEdit] = useState(false)\r\n\r\n    const editTask = () => {\r\n        if (newTitle.trim() !== \"\") {\r\n            props.callBack(newTitle)\r\n        }\r\n    }\r\n\r\n    const changeEditHandler = () => {\r\n        setEdit(!edit)\r\n        editTask()\r\n    }\r\n\r\n    const onChangeHandler = (newTitle: string) => {\r\n        setNewTitle(newTitle)\r\n    }\r\n\r\n    return (\r\n        edit\r\n            ? <input autoFocus onBlur={changeEditHandler}\r\n                     onChange={(e) => onChangeHandler(e.currentTarget.value)} value={newTitle} type=\"text\"/>\r\n            : <span onDoubleClick={changeEditHandler}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    todolistId: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTodolist: (todolistId: string) => void\r\n    editTodolistTitle: (todolistId: string, newTitle: string) => void\r\n    removeTask: (todolistId: string, taskId: string) => void\r\n    editTask: (todolistId: string, taskId: string, newTitle: string) => void\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (todolistId: string, title: string) => void\r\n    changeTaskStatus: (todolistId: string, taskId: string, isDone: boolean) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(props.todolistId, title)\r\n    }\r\n\r\n    const removeTodolistHandler = () => {\r\n        props.removeTodolist(props.todolistId)\r\n    }\r\n    const editTodolistTitleHandler = (newTitle: string) => {\r\n        props.editTodolistTitle(props.todolistId, newTitle)\r\n    }\r\n    const onAllClickHandler = () => props.changeFilter(props.todolistId, \"all\");\r\n    const onActiveClickHandler = () => props.changeFilter(props.todolistId, \"active\");\r\n    const onCompletedClickHandler = () => props.changeFilter(props.todolistId, \"completed\");\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan title={props.title} callBack={editTodolistTitleHandler}/>\r\n            <button onClick={removeTodolistHandler}>x</button>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(props.todolistId, t.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(props.todolistId, t.id, e.currentTarget.checked);\r\n                    }\r\n                    const editTaskHandler = (newTitle: string) => {\r\n                        props.editTask(props.todolistId, t.id, newTitle)\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\"\r\n                               onChange={onChangeHandler}\r\n                               checked={t.isDone}/>\r\n                        <EditableSpan title={t.title} callBack={editTaskHandler}/>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\ntype TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n            {id: v1(), title: \"JS2\", isDone: true},\r\n            {id: v1(), title: \"ReactJS2\", isDone: false},\r\n            {id: v1(), title: \"Rest API2\", isDone: false},\r\n            {id: v1(), title: \"GraphQL2\", isDone: false},\r\n        ]\r\n    });\r\n\r\n    function addTodolist(title: string) {\r\n        let newTodolist: TodolistsType = {id: v1(), title: title, filter: 'all'}\r\n        setTodolists([...todolists, newTodolist])\r\n        setTasks({...tasks, [newTodolist.id]: []})\r\n    }\r\n\r\n    function removeTodolist(todolistId: string) {\r\n        setTodolists(todolists.filter(el => el.id !== todolistId))\r\n        delete tasks[todolistId]\r\n    }\r\n\r\n    function editTodolistTitle(todolistId: string, newTitle: string) {\r\n        setTodolists(todolists.map(tdl=>tdl.id === todolistId ? {...tdl, title:newTitle} : tdl))\r\n    }\r\n\r\n    function removeTask(todolistId: string, taskId: string) {\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].filter(el => el.id !== taskId)})\r\n    }\r\n\r\n    function addTask(todolistId: string, title: string) {\r\n        let newTask = {id: v1(), title: title, isDone: false}\r\n        setTasks({...tasks, [todolistId]: [newTask, ...tasks[todolistId]]})\r\n    }\r\n\r\n    function editTask(todolistId: string, taskId: string, newTitle: string) {\r\n        console.log(newTitle)\r\n        setTasks({...tasks, [todolistId]:tasks[todolistId].map(el=>el.id === taskId ? {...el, title:newTitle} : el)})\r\n    }\r\n\r\n    function changeStatus(todolistId: string, taskId: string, isDone: boolean) {\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].map(el => el.id === taskId ? {...el, isDone: isDone} : el)})\r\n    }\r\n\r\n    function changeFilter(todolistId: string, value: FilterValuesType) {\r\n        setTodolists(todolists.map(el => el.id === todolistId ? {...el, filter: value} : el))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <AddItemForm addItem={addTodolist}/>\r\n\r\n            {\r\n                todolists.map(tdl => {\r\n\r\n                    let tasksForTodolist = tasks[tdl.id];\r\n\r\n                    if (tdl.filter === \"active\") {\r\n                        tasksForTodolist = tasks[tdl.id].filter(t => !t.isDone);\r\n                    }\r\n                    if (tdl.filter === \"completed\") {\r\n                        tasksForTodolist = tasks[tdl.id].filter(t => t.isDone);\r\n                    }\r\n\r\n                    return (\r\n                        <Todolist\r\n                            key={tdl.id}\r\n                            todolistId={tdl.id}\r\n                            title={tdl.title}\r\n                            tasks={tasksForTodolist}\r\n                            removeTodolist={removeTodolist}\r\n                            editTodolistTitle={editTodolistTitle}\r\n                            removeTask={removeTask}\r\n                            editTask={editTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeStatus}\r\n                            filter={tdl.filter}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}